import UIKit
import AVKit
import Photos

class ViewController: UIViewController {
    
    @IBOutlet weak var videoPlayerView: UIView!
    @IBOutlet weak var timeLabel: UILabel!
    @IBOutlet weak var captureButton: UIButton!
    @IBOutlet weak var outputTextView: UITextView!
    @IBOutlet weak var downloadButton: UIButton!
    
    let videoFilePicker = UIImagePickerController()
    var player: AVPlayer?
    var capturedTimes = [[String: Any]]()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupVideoPlayer()
        setupVideoFilePicker()
    }
    
    func setupVideoPlayer() {
        let videoURL = // URL of the video file
        
        player = AVPlayer(url: videoURL)
        let playerLayer = AVPlayerLayer(player: player)
        playerLayer.frame = videoPlayerView.bounds
        videoPlayerView.layer.addSublayer(playerLayer)
        
        player?.addPeriodicTimeObserver(forInterval: CMTime(seconds: 0.1, preferredTimescale: CMTimeScale(NSEC_PER_SEC)), queue: .main) { [weak self] time in
            self?.updateTimeDisplay(time)
        }
    }
    
    func updateTimeDisplay(_ time: CMTime) {
        let currentTime = Int(time.seconds * 1000)
        timeLabel.text = "\(currentTime)"
    }
    
    func setupVideoFilePicker() {
        videoFilePicker.delegate = self
        videoFilePicker.sourceType = .savedPhotosAlbum
        videoFilePicker.mediaTypes = ["public.movie"]
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        checkPhotoLibraryPermission()
    }
    
    func checkPhotoLibraryPermission() {
        let status = PHPhotoLibrary.authorizationStatus()
        switch status {
        case .authorized:
            videoFilePicker.view.isUserInteractionEnabled = true
        case .notDetermined:
            PHPhotoLibrary.requestAuthorization { [weak self] status in
                DispatchQueue.main.async {
                    self?.handlePhotoLibraryAuthorization(status)
                }
            }
        default:
            handlePhotoLibraryAuthorization(status)
        }
    }
    
    func handlePhotoLibraryAuthorization(_ status: PHAuthorizationStatus) {
        switch status {
        case .authorized:
            videoFilePicker.view.isUserInteractionEnabled = true
        case .denied, .restricted:
            let alert = UIAlertController(title: "Photo Library Access Required", message: "Please grant access to your photo library in the device settings to select a video.", preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
            present(alert, animated: true, completion: nil)
        default:
            break
        }
    }
    
    @IBAction func selectVideoFile(_ sender: UIButton) {
        present(videoFilePicker, animated: true, completion: nil)
    }
    
    @IBAction func captureTime(_ sender: UIButton) {
        guard let player = player else { return }
        let currentTime = Int(player.currentTime().seconds * 1000)
        
        let capturedTime: [String: Any] = [
            "time": currentTime,
            "duration": 500,
            "name": ""
        ]
        capturedTimes.append(capturedTime)
        
        outputTextView.text = capturedTimes.jsonString(prettyPrinted: true)
        downloadButton.isEnabled = true
    }
    
    @IBAction func exportJSON(_ sender: UIButton) {
        let json = capturedTimes.jsonString(prettyPrinted: true)
        let data = Data(json.utf8)
        
        let fileManager = FileManager.default
        let documentsURL = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first!
        let fileURL = documentsURL.appendingPathComponent("captured_times.json")
        
        do {
            try data.write(to: fileURL)
            print("File saved: \(fileURL.absoluteString)")
        } catch {
            print("Error saving file: \(error)")
        }
    }
}

extension ViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        dismiss(animated: true, completion: nil)
        
        guard let videoURL = info[.mediaURL] as? URL else {
            print("Error retrieving video URL")
            return
        }
        
        player = AVPlayer(url: videoURL)
        let playerLayer = AVPlayerLayer(player: player)
        playerLayer.frame = videoPlayerView.bounds
        videoPlayerView.layer.addSublayer(playerLayer)
        
        player?.addPeriodicTimeObserver(forInterval: CMTime(seconds: 0.1, preferredTimescale: CMTimeScale(NSEC_PER_SEC)), queue: .main) { [weak self] time in
            self?.updateTimeDisplay(time)
        }
        
        captureButton.isEnabled =true
    }
}
